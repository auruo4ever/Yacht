/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.33).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Order;
import io.swagger.model.Place;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-03-23T09:25:02.102Z[GMT]")
@Validated
public interface PlaceApi {

    @Operation(summary = "Add a new place", description = "", tags={ "place" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful Order", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Place.class))),
        
        @ApiResponse(responseCode = "405", description = "Invalid input") })
    @RequestMapping(value = "/place",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Place> addPlace(@Parameter(in = ParameterIn.DEFAULT, description = "Place object that needs to be added to the store", required=true, schema=@Schema()) @Valid @RequestBody Place body);


    @Operation(summary = "Find place by ID", description = "Returns a single place", tags={ "place" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful response", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Place.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid id"),
        
        @ApiResponse(responseCode = "404", description = "Place is not found") })
    @RequestMapping(value = "/place/{placeId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Place> getPlaceById(@Parameter(in = ParameterIn.PATH, description = "id of the place", required=true, schema=@Schema()) @PathVariable("placeId") Long placeId);


    @Operation(summary = "Update an existing place", description = "", tags={ "place" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "400", description = "Invalid ID"),
        
        @ApiResponse(responseCode = "404", description = "Place not found"),
        
        @ApiResponse(responseCode = "405", description = "Validation exception") })
    @RequestMapping(value = "/place",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updatePlace(@Parameter(in = ParameterIn.DEFAULT, description = "Place object that needs to be update", required=true, schema=@Schema()) @Valid @RequestBody Place body);

    @Operation(summary = "find all places", description = "", security = {
            @SecurityRequirement(name = "persistdata_auth", scopes = {
                    "write:places",
                    "read:places"        })    }, tags={ "places" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(schema = @Schema(implementation = Place.class))) })
    @RequestMapping(value = "/place",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<List<Place>> findAllPlaces();

}

